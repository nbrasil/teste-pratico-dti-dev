{"ast":null,"code":"var _jsxFileName = \"/Users/nicollybrasil/Desktop/FullStack/teste-dti-dev/frontend/src/components/RouteMap.js\";\nimport React from 'react';\nimport './RouteMap.css';\n\n// Cores para diferenciar as rotas dos drones\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ROUTE_COLORS = ['#3498db', '#e74c3c', '#2ecc71', '#f1c40f', '#9b59b6', '#1abc9c'];\nfunction RouteMap({\n  voos = []\n}) {\n  // Definimos o tamanho da nossa \"caixa de visualização\" para o SVG.\n  // Isso cria um plano cartesiano com o centro em (0,0).\n  const viewBox = \"-100 -100 200 200\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"route-map-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Mapa de Rotas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      viewBox: viewBox,\n      className: \"route-map-svg\",\n      children: [obstaculo.map(obs => /*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: obs.x,\n        cy: obs.y,\n        r: obs.raio,\n        className: \"obstacle-zone\"\n      }, obs.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: \"-100\",\n        y1: \"0\",\n        x2: \"100\",\n        y2: \"0\",\n        className: \"axis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: \"0\",\n        y1: \"-100\",\n        x2: \"0\",\n        y2: \"100\",\n        className: \"axis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: \"0\",\n        cy: \"0\",\n        r: \"3\",\n        className: \"base-point\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n        x: \"5\",\n        y: \"5\",\n        className: \"base-text\",\n        children: \"Base\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this), voos.map((voo, index) => {\n        if (!voo.rota || voo.rota.length === 0) return null;\n\n        // Constrói a string de pontos para a polyline: \"x1,y1 x2,y2 ...\"\n        const rotaPoints = voo.rota.map(p => `${p.x},${p.y}`).join(' ');\n        const fullPath = `0,0 ${rotaPoints} 0,0`;\n        const color = ROUTE_COLORS[index % ROUTE_COLORS.length];\n        return /*#__PURE__*/_jsxDEV(\"g\", {\n          className: \"route-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"polyline\", {\n            points: fullPath,\n            style: {\n              stroke: color\n            },\n            className: \"route-line\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 29\n          }, this), voo.rota.map((ponto, pIndex) => /*#__PURE__*/_jsxDEV(\"circle\", {\n            cx: ponto.x,\n            cy: ponto.y,\n            r: \"2\",\n            style: {\n              fill: color\n            },\n            className: \"delivery-point\"\n          }, `${voo.id}-${pIndex}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 33\n          }, this)), /*#__PURE__*/_jsxDEV(\"text\", {\n            x: voo.rota[0].x,\n            y: voo.rota[0].y - 5 // Posição um pouco acima do primeiro ponto\n            ,\n            className: \"route-info-text\",\n            children: [\"Voo #\", voo.id, \" (~\", voo.tempo_estimado_minutos, \" min)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 29\n          }, this)]\n        }, voo.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 25\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 9\n  }, this);\n}\n_c = RouteMap;\nexport default RouteMap;\nvar _c;\n$RefreshReg$(_c, \"RouteMap\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","ROUTE_COLORS","RouteMap","voos","viewBox","className","children","fileName","_jsxFileName","lineNumber","columnNumber","obstaculo","map","obs","cx","x","cy","y","r","raio","id","x1","y1","x2","y2","voo","index","rota","length","rotaPoints","p","join","fullPath","color","points","style","stroke","ponto","pIndex","fill","tempo_estimado_minutos","_c","$RefreshReg$"],"sources":["/Users/nicollybrasil/Desktop/FullStack/teste-dti-dev/frontend/src/components/RouteMap.js"],"sourcesContent":["import React from 'react';\nimport './RouteMap.css';\n\n// Cores para diferenciar as rotas dos drones\nconst ROUTE_COLORS = ['#3498db', '#e74c3c', '#2ecc71', '#f1c40f', '#9b59b6', '#1abc9c'];\n\nfunction RouteMap({ voos = [] }) {\n    // Definimos o tamanho da nossa \"caixa de visualização\" para o SVG.\n    // Isso cria um plano cartesiano com o centro em (0,0).\n    const viewBox = \"-100 -100 200 200\";\n\n    return (\n        <div className=\"route-map-container\">\n            <h3>Mapa de Rotas</h3>\n            <svg viewBox={viewBox} className=\"route-map-svg\">\n\n                {obstaculo.map(obs => (\n                    <circle \n                        key={obs.id}\n                        cx={obs.x}\n                        cy={obs.y}\n                        r={obs.raio}\n                        className=\"obstacle-zone\"\n                    />\n                ))}\n\n                {/* Eixo X e Y para referência */}\n                <line x1=\"-100\" y1=\"0\" x2=\"100\" y2=\"0\" className=\"axis\" />\n                <line x1=\"0\" y1=\"-100\" x2=\"0\" y2=\"100\" className=\"axis\" />\n\n                {/* Ponto da Base (0,0) */}\n                <circle cx=\"0\" cy=\"0\" r=\"3\" className=\"base-point\" />\n                <text x=\"5\" y=\"5\" className=\"base-text\">Base</text>\n\n                {/* Mapeia cada voo para desenhar sua rota e pontos de entrega */}\n                {voos.map((voo, index) => {\n                    if (!voo.rota || voo.rota.length === 0) return null;\n\n                    // Constrói a string de pontos para a polyline: \"x1,y1 x2,y2 ...\"\n                    const rotaPoints = voo.rota.map(p => `${p.x},${p.y}`).join(' ');\n                    const fullPath = `0,0 ${rotaPoints} 0,0`;\n                    const color = ROUTE_COLORS[index % ROUTE_COLORS.length];\n\n                    return (\n                        <g key={voo.id} className=\"route-group\">\n                            {/* Desenha a linha da rota */}\n                            <polyline\n                                points={fullPath}\n                                style={{ stroke: color }}\n                                className=\"route-line\"\n                            />\n                            \n                            {/* Desenha um círculo para cada ponto de entrega */}\n                            {voo.rota.map((ponto, pIndex) => (\n                                <circle\n                                    key={`${voo.id}-${pIndex}`}\n                                    cx={ponto.x}\n                                    cy={ponto.y}\n                                    r=\"2\"\n                                    style={{ fill: color }}\n                                    className=\"delivery-point\"\n                                />\n                            ))}\n                            <text \n                                x={voo.rota[0].x} \n                                y={voo.rota[0].y - 5} // Posição um pouco acima do primeiro ponto\n                                className=\"route-info-text\"\n                            >\n                                Voo #{voo.id} (~{voo.tempo_estimado_minutos} min)\n                            </text>\n                        </g>\n                    );\n                })}\n            </svg>\n        </div>\n    );\n}\n\nexport default RouteMap;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}